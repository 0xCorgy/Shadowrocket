name: Update RewriteFiles
on:
  schedule:
    - cron: '22 22 * * *'
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: false

jobs:
  copy-links:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Git configuration
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

      - name: Create necessary directories
        run: |
          mkdir -p Rewrite/JavaScript
          mkdir -p Rewrite/NaisiConfig
          mkdir -p Rewrite/NaisiScripts
          mkdir -p Rewrite/ZirawellConfig
          mkdir -p Rewrite/ZirawellScripts

      - name: Define file paths and links
        run: |
          echo "Rewrite/NaisiConfig/QuanX.conf|https://raw.githubusercontent.com/fmz200/wool_scripts/main/QuantumultX/rewrite/rewrite.snippet" > rewrite_file_links.list
          echo "Rewrite/NaisiConfig/Loon.conf|https://raw.githubusercontent.com/fmz200/wool_scripts/main/Loon/plugin/blockAds.plugin" >> rewrite_file_links.list
          echo "Rewrite/NaisiConfig/Weibo.conf|https://raw.githubusercontent.com/fmz200/wool_scripts/main/QuantumultX/rewrite/weibo.snippet" >> rewrite_file_links.list
          echo "Rewrite/NaisiConfig/Filter.conf|https://raw.githubusercontent.com/fmz200/wool_scripts/main/QuantumultX/filter/filter.list" >> rewrite_file_links.list
          echo "Rewrite/ZirawellConfig/AllAdRewrite.conf|https://raw.githubusercontent.com/zirawell/R-Store/main/Rule/QuanX/Adblock/All/rewrite/allAdRewrite.conf" >> rewrite_file_links.list
          echo "Rewrite/ZirawellConfig/AllAdBlock.conf|https://raw.githubusercontent.com/zirawell/R-Store/main/Rule/QuanX/Adblock/All/filter/allAdBlock.list" >> rewrite_file_links.list

      - name: Download files
        run: |
          while IFS='|' read -r filepath url; do
            echo "Downloading: $url -> $filepath"
            curl -fsS -o "$filepath" "$url" || true
          done < rewrite_file_links.list

      - name: Clear previous JavaScriptCheck.md contents
        run: |
          > Rewrite/JavaScriptCheck.md

      - name: Preprocess Naisi Scripts
        run: |
          files_to_check=(
            "Rewrite/NaisiConfig/QuanX.conf"
            "Rewrite/NaisiConfig/Loon.conf"
            "Rewrite/NaisiConfig/Weibo.conf"
            "Rewrite/NaisiConfig/RejectList.conf"
          )
          declare -A downloaded_urls
          declare -A downloaded_files
          > NaisiScripts.list
          > NaisiScriptsMap.list
          for file in "${files_to_check[@]}"; do
            if [ -f "$file" ]; then
              echo "Processing: $file"
              sed 's/#.*//' "$file" | grep -Eo 'https?://[^ ]+\.(js|json|jq)' | sort -u >> NaisiScripts.list
            fi
          done
          sort -u NaisiScripts.list -o NaisiScripts.list
          while IFS= read -r url; do
            if [[ "$url" =~ ^http://script.hub/convert/_start_/(.*)/_end_/.*$ ]]; then
              raw_url="${BASH_REMATCH[1]}"
            else
              raw_url="$url"
            fi
            if echo "$raw_url" | grep -q "https://github.com/.*/raw/"; then
              raw_url=$(echo "$raw_url" | sed 's#https://github.com/\(.*\)/raw/\(.*\)#https://raw.githubusercontent.com/\1/\2#g')
            fi
            if [[ -n "${downloaded_urls[$raw_url]}" ]]; then
              continue
            fi
            filename=$(basename "$raw_url")
            filepath="Rewrite/NaisiScripts/$filename"
            if [[ -n "${downloaded_files[$filename]}" && "${downloaded_files[$filename]}" != "$raw_url" ]]; then
              basename_noext="${filename%.*}"
              ext="${filename##*.}"
              filepath="Rewrite/NaisiScripts/${basename_noext}_2.${ext}"
              echo "$filename $basename_noext"_2."$ext ${downloaded_files[$filename]} $raw_url" >> NaisiScriptsMap.list
            fi
            curl -fsS -o "$filepath" "$raw_url" || echo "Failed to download $raw_url"
            downloaded_urls[$raw_url]=1
            downloaded_files[$filename]="$raw_url"
          done < NaisiScripts.list

      - name: Copy selected NaisiScripts to JavaScript
        run: |
          selected_scripts=(
            "12306.js"
            "51card.js"
            "51job.js"
            "555Ad.js"
            "BahamutAnimeAds.js"
            "Flightradar24.js"
            "PupuSplashAds.js"
            "QuDa.js"
            "Smzdm.js"
            "Umetrip_remove_ads.js"
            "UnblockURLinWeChat.js"
            "adrive.js"
            "adsense.js"
            "airchina.js"
            "baidumap.js"
            "bilibiliManga.js"
            "blued.js"
            "bohe_ads.js"
            "cainiao.js"
            "caixinAd.js"
            "cnftp.js"
            "coolapk.js"
            "ddxq.js"
            "dianping.js"
            "dianyinglieshou.js"
            "dict-youdao-ad.js"
            "didiAds.js"
            "fenbi.js"
            "fly.js"
            "flyert.js"
            "freshippo.js"
            "hengdian.json"
            "huifutianxia_ads.js"
            "index.js"
            "ithome.js"
            "jingdong.js"
            "jingxiAd.js"
            "keep.js"
            "kuwo.js"
            "ltsst-ad.js"
            "mafengwo.js"
            "maimai_ads.js"
            "mdb.js"
            "meiyou_ads.js"
            "myBlockAds.js"
            "picc_ads.js"
            "qidian.js"
            "qmai.js"
            "qq-news.js"
            "reddit.js"
            "reject-dict.json"
            "req_replace_body.js"
            "rrtv_json.js"
            "smzdm_ads.js"
            "soda.js"
            "soul_ads.js"
            "tieba-json.js"
            "tieba-proto.js"
            "vgtime.js"
            "wechatApplet.js"
            "weibo_ads.js"
            "weibo_launch.js"
            "weibo_main.js"
            "weibo_main_2.js"
            "weibo_vip.js"
            "wnbz.js"
            "wyres.js"
            "xianyu_ads.js"
            "xiaotucc.js"
            "xjsp.js"
            "xmApp.js"
            "xmly_json.js"
            "yx.js"
            "zhangshanggongjiao.js"
            "zhihu.js"
            "zhuanzhuan.js"
          )
          original_links=""
          for script in "${selected_scripts[@]}"; do
            src="Rewrite/NaisiScripts/$script"
            dst="Rewrite/JavaScript/$script"
            if [[ "$script" =~ ^(.+)_2\.(js|json|jq)$ ]]; then
              base_name="${BASH_REMATCH[1]}"
              ext="${BASH_REMATCH[2]}"
              original_url=$(awk -v s="$script" '$2 == s {print $4}' NaisiScriptsMap.list)
              if [[ -z "$original_url" ]]; then
                original_url=$(grep -F "$script" NaisiScripts.list)
              fi
            else
              original_url=$(grep -F "$script" NaisiScripts.list)
            fi
            if [ -f "$src" ]; then
              cp "$src" "$dst"
              original_links="${original_links}${original_url}<br>\n"
            fi
          done
          {
            echo "### Update:$(TZ='Asia/Shanghai' date '+%Y-%m-%d')<br>"
            echo ""
            echo "### fmz200:<br>"
            echo -e "$original_links"
          } >> Rewrite/JavaScriptCheck.md

      - name: Preprocess Zirawell Scripts
        run: |
          file="Rewrite/ZirawellConfig/AllAdRewrite.conf"
          if [ -f "$file" ]; then
            > ZirawellScripts.list
            grep -Eo 'https?://[^ ]+\.(js|json|jq)' "$file" | sort -u >> ZirawellScripts.list
            declare -A downloaded_files
            while IFS= read -r url; do
              filename=$(basename "$url")
              filepath="Rewrite/ZirawellScripts/$filename"
              if [[ -n "${downloaded_files[$filename]}" && "${downloaded_files[$filename]}" != "$url" ]]; then
                base="${filename%.*}"
                ext="${filename##*.}"
                filepath="Rewrite/ZirawellScripts/${base}_2.${ext}"
              fi
              curl -fsS -o "$filepath" "$url" || echo "Failed to download $url"
              downloaded_files[$filename]="$url"
            done < ZirawellScripts.list
          fi

      - name: Copy selected ZirawellScripts to JavaScript
        run: |
          selected_scripts=(
            "163news.js"
            "360cam.js"
            "51cto.js"
            "babytree.js"
            "baiduPan.js"
            "ccblife.js"
            "dubbingShow.js"
            "duitang.js"
            "dushu365.js"
            "ecny.js"
            "gaoding.js"
            "guiderank.js"
            "haier.js"
            "kuaikanComic.js"
            "meituan.js"
            "mishop.js"
            "pdd.js"
            "ppx.js"
            "quark.js"
            "sdb.js"
            "spotify.js"
            "sqkb.js"
            "sougou.js"
            "tiebaJson.js"
            "tuhu.js"
            "xiaoheihe.js"
            "xunlei.js"
            "ys7.js"
          )
          original_links=""
          for script in "${selected_scripts[@]}"; do
            src="Rewrite/ZirawellScripts/$script"
            dst="Rewrite/JavaScript/$script"
            original_url=$(grep -Eo 'https?://[^ ]+\.(js|json|jq)' ZirawellScripts.list | grep "$script")
            if [ -f "$src" ]; then
              cp "$src" "$dst"
              original_links="${original_links}${original_url}<br>\n"
            fi
          done
          if [[ -n "$original_links" ]]; then
            {
              echo "### Zirawell:<br>"
              echo -e "$original_links"
            } >> Rewrite/JavaScriptCheck.md
          fi

      - name: Preprocess Local Scripts
        run: |
          invalid_list=""
          valid_list=""
          files_to_check=(
            "Rewrite/AliAMDC.js"
            "Rewrite/Amap.js"
            "Rewrite/Bilibili.conf"
            "Rewrite/FAWVW.js"
            "Rewrite/Rednote.conf"
            "Rewrite/ReplaceBody.js"
            "Rewrite/YouTube.conf"
          )
          declare -A downloaded_files
          > LocalScripts.list
          for file in "${files_to_check[@]}"; do
            [ -f "$file" ] && grep -Eo 'https?://[^ ]+\.(js|json|jq)' "$file" >> LocalScripts.list
          done
          sort -u -o LocalScripts.list LocalScripts.list
          original_links=""
          while IFS= read -r local_url; do
            if echo "$local_url" | grep -Eq "XiangwanGuan/Shadowrocket/main/Rewrite/JavaScript/|xiangwanguan.github.io/Shadowrocket/Rewrite/JavaScript/"; then
              continue
            fi
            filename=$(basename "$local_url")
            filepath="Rewrite/JavaScript/$filename"
            if [[ -n "${downloaded_files[$filename]}" && "${downloaded_files[$filename]}" != "$local_url" ]]; then
              basename_noext="${filename%.*}"
              ext="${filename##*.}"
              filepath="Rewrite/JavaScript/${basename_noext}2.${ext}"
            fi
            curl -fsS -o "$filepath" "$local_url" || echo "Failed to download $local_url"
            downloaded_files[$filename]="$local_url"
            original_links+="$local_url<br>\n"
          done < LocalScripts.list
          if [[ -n "$original_links" ]]; then
            {
              echo "### Local:<br>"
              echo -e "$original_links"
            } >> Rewrite/JavaScriptCheck.md
          fi

      - name: Commit & Copy RewriteFiles
        uses: EndBug/add-and-commit@v9
        with:
          author_name: 'GitHub Actions'
          author_email: 'actions@github.com'
          message: 'Update RewriteFiles'
          add: |
            Rewrite/JavaScript/*
            Rewrite/NaisiConfig/*
            Rewrite/NaisiScripts/*
            Rewrite/ZirawellConfig/*
            Rewrite/ZirawellScripts/*
            Rewrite/JavaScriptCheck.md
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
